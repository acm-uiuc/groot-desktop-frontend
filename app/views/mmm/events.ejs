<%- include('../_partials/header') -%>

<%
    // Session info for debug
    console.log("sesson", session)
%>

<!-- React mounting div -->
<div id="react-mount"></div>

<script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
<!--
<script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.21.1/babel.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/4.2.0/core/main.min.js" integrity="sha256-GBryZPfVv8G3K1Lu2QwcqQXAO4Szv4xlY4B/ftvyoMI=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/4.2.0/daygrid/main.min.js" integrity="sha256-FT1eN+60LmWX0J8P25UuTjEEE0ZYvpC07nnU6oFKFuI=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/4.2.0/timegrid/main.min.js" integrity="sha256-L9T+qE3Ms6Rsuxl+KwLST6a3R/2o6m33zB5mR2KyPjU=" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/4.2.0/core/main.min.css" integrity="sha256-Lfe6+s5LEek8iiZ31nXhcSez0nmOxP+3ssquHMR3Alo=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/4.2.0/daygrid/main.min.css" integrity="sha256-AVsv7CEpB2Y1F7ZjQf0WI8SaEDCycSk4vnDRt0L2MNQ=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/4.2.0/timegrid/main.min.css" integrity="sha256-DOWdbe6a1VwJwFpkimY6z5tW9mmrBNre2jZsAige5PE=" crossorigin="anonymous" />

<!-- EJS connection -->
<script type="text/javascript">
    const config = {
        authenticated: "<%= authenticated %>" === "true",
        student: {
            netid: "<%= authenticated ? session.student.netid : '' %>",
            firstName: "<%= authenticated ? session.student.firstName : '' %>",
            lastName: "<%= authenticated ? session.student.lastName : '' %>"
        },
        sigs: <%- JSON.parse(JSON.stringify(sigs)) %>
    };

    config.sigs.unshift({
        name: "Select one"
    });

    console.log(config);
</script>

<!-- Client-side React -->
<script type="text/babel">
    const EventCalendar = ({ events }) => {
        React.useEffect(() => {
            const calendarEl = document.getElementById('calendar-mount');

            const calendar = new FullCalendar.Calendar(calendarEl, {
                plugins: ['dayGrid', 'timeGrid'],
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                }
            });

            calendar.render();
        }, [events]);

        return (
            <div className="calendar-wrapper">
                <div id="calendar-mount" />
            </div>
        );
    };

    const SigSelector = ({ sigs, value, onChange }) => {
        return (
            <select className="selector" value={value} onChange={onChange}>
                {
                    sigs.map(sig => <option key={sig.name} value={sig.name}>{sig.name}</option>)
                }
            </select>
        )
    };

    const TextInput = ({ label, value, multiline = false, maxLength = 128, onChange }) => {
        return (
            <div>
                <h4 className="input-title">{label}</h4>

                {multiline ? (
                    <textarea className="text-area" maxlength={maxLength} value={value} onChange={onChange} />
                ) : (
                    <input className="text-input" maxlength={maxLength} type="text" value={value} onChange={onChange} />
                )}
            </div>
        );
    }

    const CreateForm = ({ student, sigs }) => {
        const [sigName, setSigName] = React.useState("Select one");
        const [eventTitle, setEventTitle] = React.useState("");
        const [eventDesc, setEventDesc] = React.useState("");

        const handleSubmit = () => {
            event.preventDefault();
        };

        return (
            <div className="form-container">
                <form className="form" onSubmit={handleSubmit}>
                    <div>
                        <p className="greeting">Hello {student.firstName}</p>
                        <p className="org-select-title">Choose an Organization: <SigSelector sigs={sigs} value={sigName} onChange={(e) => setSigName(e.target.value)} /></p>
                    </div>

                    <TextInput label="Title" value={eventTitle} onChange={(e) => setEventTitle(e.target.value)} />
                    <TextInput label="Description" multiline value={eventDesc} onChange={(e) => setEventDesc(e.target.value)} />
                </form>
            </div>
        )
    };

    const App = ({ config }) => {
        const [events, setEvents] = React.useState([]);

        React.useEffect(() => {
            // TODO: API calls
        }, []);

        return (
            <div className="app-container">
                <EventCalendar events={events} />
                <CreateForm student={config.student} sigs={config.sigs} />
            </div>
        )
    }

    ReactDOM.render(
        <App config={config} />,
        document.getElementById('react-mount')
    );
</script>

<!-- Fonts -->
<link href="https://fonts.googleapis.com/css?family=Open+Sans:700&display=swap" rel="stylesheet">

<!-- Styles -->
<style>
    .app-container {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }

    .calendar-wrapper {
        padding-left: 20px;
        padding-right: 20px;
        display: flex;
        justify-content: center;
    }

    @media (min-width: 810px) {
        .calendar-wrapper {
            padding-left: 50px;
            padding-right: 50px;
        }
    }

    #calendar-mount {
        max-width: 1024px;
    }

    .fc-bg > table {
        margin-bottom: 0 !important;
    }

    .form-container {
        flex: 1;
        display: flex;
        justify-content: center;
    }

    .form {
        flex: 1;
        max-width: 1024px;
        margin-top: 20px;
        min-width: 320px;
        margin-left: 20px;
        margin-right: 20px;
    }

    @media (min-width: 810px) {
        .form {
            margin-left: 50px;
            margin-right: 50px;
            min-width: 420px;
        }
    }

    @media (min-width: 1594px) {
        .form {
            margin-left: 0px;
        }
    }

    .greeting {
        font-family: "Open Sans";
        font-weight: 700;
        text-transform: uppercase;
        font-size: 14px;
        line-height: 14px;
    }

    .org-select-title {
        font-size: 28px;
        line-height: 42px;
        font-weight: 700;
        color: black;
    }

    .selector {
        margin-top: 5px;
        max-width: 360px;
    }

    .input-title {
        font-family: "Open Sans";
        font-weight: 700;
        font-size: 14px;
    }

    .text-input {

    }

    .text-area {
        resize: vertical;
        min-height: 98px;
    }
</style>