<%- include('../_partials/header') -%>

<%
    // Session info for debug
    console.log("sesson", session)
%>

<!-- React mounting div -->
<div id="react-mount"></div>

<%- include('./cdn') -%>

<!-- EJS connection -->
<script type="text/javascript">
    const config = {
        authenticated: "<%= authenticated %>" === "true",
        student: {
            netid: "<%= authenticated ? session.student.netid : '' %>",
            firstName: "<%= authenticated ? session.student.firstName : '' %>",
            lastName: "<%= authenticated ? session.student.lastName : '' %>"
        },
        sigs: <%- JSON.parse(JSON.stringify(sigs)) %>
    };

    config.sigs.unshift({
        name: "Select one"
    });

    console.log(config);
</script>

<!-- Client-side React -->
<script type="text/babel">
    const EventCalendar = ({ events }) => {

        const onEventClick = (info) => {
            console.log("Clicked event", info);
            
            // TODO: should show event information
            alert("TODO");
        };

        const onDayClick = (info) => {
            const { date, dateStr, view } = info;

            console.log("Clicked day", date, view.viewSpec.durationUnit);
        };

        const renderEvent = (info) => {
            tippy(info.el, {
                content: info.event.extendedProps.description
            });
        }

        React.useEffect(() => {
            const calendarEl = document.getElementById('calendar-mount');

            const calendar = new FullCalendar.Calendar(calendarEl, {
                plugins: ['dayGrid', 'timeGrid', 'interaction'],
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                events,
                eventRender: renderEvent,
                eventClick: onEventClick,
                dateClick: onDayClick
            });

            calendar.render();
        }, [events]);

        return (
            <div className="calendar-wrapper">
                <div id="calendar-mount" />
            </div>
        );
    };

    const SigSelector = ({ sigs, value, onChange }) => {
        return (
            <select className="selector" value={value} onChange={onChange}>
                {
                    sigs.map(sig => <option key={sig.name} value={sig.name}>{sig.name}</option>)
                }
            </select>
        )
    };

    const TextInput = ({ label, placeholder = label, value, multiline = false, maxLength = multiline ? 256 : 128, onChange }) => {
        return (
            <div>
                <h4 className="input-title">{label}</h4>

                {multiline ? (
                    <textarea className="text-area" maxLength={maxLength} placeholder={placeholder} value={value} onChange={onChange} />
                ) : (
                    <input className="text-input" maxLength={maxLength} placeholder={placeholder}  type="text" value={value} onChange={onChange} />
                )}
            </div>
        );
    }

    const DatetimePicker = ({ label, value, onChange }) => {
        const handleChange = (selectedDates, dateStr, instance) => {
            onChange(dateStr);
        };

        React.useEffect(() => {
            flatpickr(`#flatpickr-mount-${label}`, {
                defaultDate: value,
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                onChange: handleChange
            });
        }, [value]);

        return (
            <div>
                <h4 className="input-title">{label}</h4>
                <input className="datetime-picker" id={`flatpickr-mount-${label}`} />
            </div>
        );
    };

    const TagButton = ({ tag, onDelete }) => {
        return (
            <div className="tag-container">
                <span className="tag-text">{tag.text}</span>
                <span className="tag-delete" onClick={() => onDelete(tag.id)}>×</span>
            </div>
        )
    };

    const Tagger = ({ tags, onChange }) => {
        const [taggerValue, setTaggerValue] = React.useState("");

        const handleSubmit = React.useCallback(() => {
            if (taggerValue !== '') {
                onChange([{
                    id: tags.length,
                    text: taggerValue
                }].concat(tags));

                setTaggerValue("");
            }

            event.preventDefault();
        }, [taggerValue]);

        const onDelete = React.useCallback((tagId) => {
            onChange(tags.filter(tag => tag.id !== tagId));
        }, [tags]);

        return (
            <div className="tagger">
                <form onSubmit={handleSubmit}>
                    <h4 className="input-title">Tags {taggerValue !== '' && <span className="tagger-enter">(↵ to add)</span>}</h4>


                    <div className="tag-list">
                        <input className="tagger-input" maxLength={35} type="text" placeholder="Tags (ex: machine learning)" value={taggerValue} onChange={(e) => setTaggerValue(e.target.value)} />
                        
                        {tags.map((tag, index) => <TagButton key={tag.id} tag={tag} onDelete={onDelete} />)}
                    </div>
                </form>
            </div>
        );
    };

    const CreateForm = ({ student, sigs }) => {
        const [sigName, setSigName] = React.useState("Select one");
        const [eventTitle, setEventTitle] = React.useState("");
        const [eventDesc, setEventDesc] = React.useState("");
        const [eventLocation, setEventLocation] = React.useState("");
        const [tags, setTags] = React.useState([]);
        const [eventStart, setEventStart] = React.useState(new Date());
        const [eventEnd, setEventEnd] = React.useState(new Date());

        const handleSubmit = () => {
            event.preventDefault();
        };

        return (
            <div className="form-container">
                <div className="form">
                    <div>
                        <p className="greeting">Hello {student.firstName}</p>

                        <form onSubmit={handleSubmit}>
                            <p className="org-select-title">Choose an Organization: 
                                <SigSelector sigs={sigs} value={sigName} onChange={(e) => setSigName(e.target.value)} />
                            </p>
                        </form>
                    </div>

                    <TextInput label="Title" placeholder="What is the event called? (ex: HackIllinois)" value={eventTitle} onChange={(e) => setEventTitle(e.target.value)} />
                    <TextInput label="Description" placeholder="What is happening at the event? (ex: the largest Hackathon of UIUC)" multiline value={eventDesc} onChange={(e) => setEventDesc(e.target.value)} />
                    <TextInput label="Location" placeholder="Where is the event? (ex: Siebel 1404)" value={eventLocation} onChange={(e) => setEventLocation(e.target.value)} />
                    
                    <div className="date-container">
                        <DatetimePicker label="Start" value={eventStart} onChange={(newDatetime) => setEventStart(newDatetime)} />
                        <DatetimePicker label="End" value={eventEnd} onChange={(newDatetime) => setEventEnd(newDatetime)} />
                    </div>

                    <Tagger tags={tags} onChange={(newTags) => setTags(newTags)} />
                </div>
            </div>
        )
    };

    const App = ({ config }) => {
        const [events, setEvents] = React.useState([
            {
                title: 'HackIllinois',
                description: 'University of Illinois\' Open Source hackathon',
                location: "University of Illinois at Urbana Champaign",
                start: '2020-02-28 16:00',
                end: '2020-03-01 10:00',
                tags: ["hackathon"]
            }
        ]);

        React.useEffect(() => {
            // TODO: API calls
        }, []);

        return (
            <div className="app-container">
                <EventCalendar events={events} />
                <CreateForm student={config.student} sigs={config.sigs} />
            </div>
        )
    };

    ReactDOM.render(
        <App config={config} />,
        document.getElementById('react-mount')
    );
</script>

<!-- Styles -->
<style>
    .app-container {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        margin-bottom: 50px;
    }

    .calendar-wrapper {
        padding-left: 20px;
        padding-right: 20px;
        display: flex;
        justify-content: center;
    }

    @media (min-width: 810px) {
        .calendar-wrapper {
            padding-left: 50px;
            padding-right: 50px;
        }
    }

    #calendar-mount {
        max-width: 1024px;
    }

    .fc-bg > table {
        margin-bottom: 0 !important;
    }

    .form-container {
        flex: 1;
        display: flex;
        justify-content: center;
    }

    .form {
        flex: 1;
        max-width: 1024px;
        margin-top: 20px;
        min-width: 320px;
        margin-left: 20px;
        margin-right: 20px;
    }

    @media (min-width: 810px) {
        .form {
            margin-left: 50px;
            margin-right: 50px;
            min-width: 420px;
        }
    }

    @media (min-width: 1594px) {
        .form {
            margin-left: 0px;
        }
    }

    .greeting {
        font-family: "Open Sans";
        font-weight: 700;
        text-transform: uppercase;
        font-size: 14px;
        line-height: 14px;
    }

    .org-select-title {
        font-size: 28px;
        line-height: 42px;
        font-weight: 700;
        color: black;
    }

    .selector {
        margin-top: 5px;
        max-width: 360px;
    }

    .input-title {
        font-family: "Open Sans";
        font-weight: 700;
        font-size: 14px;
    }

    .text-input {}

    .text-area {
        resize: vertical;
        min-height: 98px;
    }

    .tagger-enter {
        font-weight: 700;
        color: rgb(173, 173, 173);
    }

    .tagger-input {
        max-width: 256px;
    }

    .tag-list {
        display: flex;
        flex-direction: row;
        justify-content: start;
        align-items: flex-start;
        flex-wrap: wrap;
    }

    .tag-container {
        margin-left: 8px;
        padding: 6px 6px 6px 6px;
        display: flex;
        justify-content: space-between;
        background-color: rgb(235, 235, 235);
        border-style: solid;
        border-color: rgb(212, 212, 212);
        border-width: 1px;
        border-radius: 4px;
        margin-bottom: 18px;
    }

    .tag-delete {
        padding-left: 8px;
        padding-right: 4px;
        cursor: pointer;
        font-size: 20px;
        line-height: 24px;
        color: rgb(168, 168, 168);
    }

    .datetime-picker {
        max-width: 256px;
    }

    .date-container {
        display: flex;
        flex-direction: row;
        justify-content: start;
    }

    .date-container div:nth-child(2) {
        margin-left: 20px;
    }
    
</style>